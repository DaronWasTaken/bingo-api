// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using bingo_api.Models.Entities;

#nullable disable

namespace bingo_api.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20240603235817_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("bingo_api.Models.Entities.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BadgeFile")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("badge_file");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("Points")
                        .HasColumnType("integer")
                        .HasColumnName("points");

                    b.Property<int>("TotalSubtasks")
                        .HasColumnType("integer")
                        .HasColumnName("total_subtasks");

                    b.HasKey("Id")
                        .HasName("achievements_pk");

                    b.ToTable("achievement", (string)null);
                });

            modelBuilder.Entity("bingo_api.Models.Entities.Item", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("Points")
                        .HasColumnType("integer")
                        .HasColumnName("points");

                    b.HasKey("Id")
                        .HasName("scanobjects_pk");

                    b.ToTable("item", (string)null);
                });

            modelBuilder.Entity("bingo_api.Models.Entities.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RequiredPoints")
                        .HasColumnType("integer")
                        .HasColumnName("required_points");

                    b.HasKey("Id")
                        .HasName("level_pk");

                    b.ToTable("level", (string)null);
                });

            modelBuilder.Entity("bingo_api.Models.Entities.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("numeric(9,6)")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("numeric(9,6)")
                        .HasColumnName("longitude");

                    b.Property<int>("Radius")
                        .HasColumnType("integer")
                        .HasColumnName("radius");

                    b.HasKey("Id")
                        .HasName("locations_pk");

                    b.ToTable("location", (string)null);
                });

            modelBuilder.Entity("bingo_api.Models.Entities.Subtask", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AchievementId")
                        .HasColumnType("integer")
                        .HasColumnName("achievement_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageFile")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_file");

                    b.Property<string>("ItemId")
                        .HasColumnType("text")
                        .HasColumnName("item_id");

                    b.Property<string>("LocationId")
                        .HasColumnType("text")
                        .HasColumnName("location_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("TotalNumber")
                        .HasColumnType("integer")
                        .HasColumnName("total_number");

                    b.HasKey("Id")
                        .HasName("subtask_pk");

                    b.HasIndex("AchievementId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LocationId");

                    b.ToTable("subtask", (string)null);
                });

            modelBuilder.Entity("bingo_api.Models.Entities.Token", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("usr_id");

                    b.Property<DateTime>("AccessExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("access_expires_at");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("RefreshExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_expires_at");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.HasKey("UserId")
                        .HasName("token_pk");

                    b.ToTable("token", (string)null);
                });

            modelBuilder.Entity("bingo_api.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("LevelId")
                        .HasColumnType("integer")
                        .HasColumnName("level_id");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<int>("Points")
                        .HasColumnType("integer")
                        .HasColumnName("points");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("usr_pk");

                    b.HasIndex("LevelId");

                    b.ToTable("usr", (string)null);
                });

            modelBuilder.Entity("bingo_api.Models.Entities.UserAchievement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AchievementId")
                        .HasColumnType("integer")
                        .HasColumnName("achievement_id");

                    b.Property<int>("CompletedSubtasks")
                        .HasColumnType("integer")
                        .HasColumnName("completed_subtasks");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completion_date");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("user_achievement_pk");

                    b.HasIndex("AchievementId");

                    b.HasIndex("UserId");

                    b.ToTable("user_achievement", (string)null);
                });

            modelBuilder.Entity("bingo_api.Models.Entities.UserItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("item_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("user_item_pk");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("user_item", (string)null);
                });

            modelBuilder.Entity("bingo_api.Models.Entities.UserSubtask", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("NumberCompleted")
                        .HasColumnType("integer")
                        .HasColumnName("number_completed");

                    b.Property<string>("SubtaskId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subtask_id");

                    b.Property<string>("UserAchievementId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_achievement_id");

                    b.HasKey("Id")
                        .HasName("user_subtask_pk");

                    b.HasIndex("SubtaskId");

                    b.HasIndex("UserAchievementId");

                    b.ToTable("user_subtask", (string)null);
                });

            modelBuilder.Entity("bingo_api.Models.Entities.Subtask", b =>
                {
                    b.HasOne("bingo_api.Models.Entities.Achievement", "Achievement")
                        .WithMany("Subtasks")
                        .HasForeignKey("AchievementId")
                        .IsRequired()
                        .HasConstraintName("subtask_achievement");

                    b.HasOne("bingo_api.Models.Entities.Item", "Item")
                        .WithMany("Subtasks")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("subtask_item");

                    b.HasOne("bingo_api.Models.Entities.Location", "Location")
                        .WithMany("Subtasks")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("subtask_location");

                    b.Navigation("Achievement");

                    b.Navigation("Item");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("bingo_api.Models.Entities.Token", b =>
                {
                    b.HasOne("bingo_api.Models.Entities.User", "User")
                        .WithOne("Token")
                        .HasForeignKey("bingo_api.Models.Entities.Token", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("usr_token");

                    b.Navigation("User");
                });

            modelBuilder.Entity("bingo_api.Models.Entities.User", b =>
                {
                    b.HasOne("bingo_api.Models.Entities.Level", "Level")
                        .WithMany("Usrs")
                        .HasForeignKey("LevelId")
                        .IsRequired()
                        .HasConstraintName("usr_level");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("bingo_api.Models.Entities.UserAchievement", b =>
                {
                    b.HasOne("bingo_api.Models.Entities.Achievement", "Achievement")
                        .WithMany("UserAchievements")
                        .HasForeignKey("AchievementId")
                        .IsRequired()
                        .HasConstraintName("usr_ach_achievement");

                    b.HasOne("bingo_api.Models.Entities.User", "User")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("usr_ach_usr");

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("bingo_api.Models.Entities.UserItem", b =>
                {
                    b.HasOne("bingo_api.Models.Entities.Item", "Item")
                        .WithMany("UserItems")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("usr_item_item");

                    b.HasOne("bingo_api.Models.Entities.User", "User")
                        .WithMany("UserItems")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("usr_item_usr");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("bingo_api.Models.Entities.UserSubtask", b =>
                {
                    b.HasOne("bingo_api.Models.Entities.Subtask", "Subtask")
                        .WithMany("UserSubtasks")
                        .HasForeignKey("SubtaskId")
                        .IsRequired()
                        .HasConstraintName("usr_sub_subtask");

                    b.HasOne("bingo_api.Models.Entities.UserAchievement", "UserAchievement")
                        .WithMany("UserSubtasks")
                        .HasForeignKey("UserAchievementId")
                        .IsRequired()
                        .HasConstraintName("usr_sub_usr_ach");

                    b.Navigation("Subtask");

                    b.Navigation("UserAchievement");
                });

            modelBuilder.Entity("bingo_api.Models.Entities.Achievement", b =>
                {
                    b.Navigation("Subtasks");

                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("bingo_api.Models.Entities.Item", b =>
                {
                    b.Navigation("Subtasks");

                    b.Navigation("UserItems");
                });

            modelBuilder.Entity("bingo_api.Models.Entities.Level", b =>
                {
                    b.Navigation("Usrs");
                });

            modelBuilder.Entity("bingo_api.Models.Entities.Location", b =>
                {
                    b.Navigation("Subtasks");
                });

            modelBuilder.Entity("bingo_api.Models.Entities.Subtask", b =>
                {
                    b.Navigation("UserSubtasks");
                });

            modelBuilder.Entity("bingo_api.Models.Entities.User", b =>
                {
                    b.Navigation("Token")
                        .IsRequired();

                    b.Navigation("UserAchievements");

                    b.Navigation("UserItems");
                });

            modelBuilder.Entity("bingo_api.Models.Entities.UserAchievement", b =>
                {
                    b.Navigation("UserSubtasks");
                });
#pragma warning restore 612, 618
        }
    }
}
